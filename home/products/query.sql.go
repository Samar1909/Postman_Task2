// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package products

import (
	"context"
	"database/sql"
)

const addApplicantProfile = `-- name: AddApplicantProfile :exec
UPDATE applicant_profile SET resume_fileName = $1 WHERE user_id = $2
`

type AddApplicantProfileParams struct {
	ResumeFilename sql.NullString
	UserID         int32
}

func (q *Queries) AddApplicantProfile(ctx context.Context, arg AddApplicantProfileParams) error {
	_, err := q.db.ExecContext(ctx, addApplicantProfile, arg.ResumeFilename, arg.UserID)
	return err
}

const createApplicantProfile = `-- name: CreateApplicantProfile :exec
INSERT INTO applicant_profile(user_id) VALUES ($1)
`

func (q *Queries) CreateApplicantProfile(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, createApplicantProfile, userID)
	return err
}

const createJobPosting = `-- name: CreateJobPosting :one
INSERT INTO job_posting(user_id) VALUES($1) RETURNING posting_id, user_id, job_title, job_description, posting_date
`

func (q *Queries) CreateJobPosting(ctx context.Context, userID sql.NullInt32) (JobPosting, error) {
	row := q.db.QueryRowContext(ctx, createJobPosting, userID)
	var i JobPosting
	err := row.Scan(
		&i.PostingID,
		&i.UserID,
		&i.JobTitle,
		&i.JobDescription,
		&i.PostingDate,
	)
	return i, err
}

const createJobPosting_applicants = `-- name: CreateJobPosting_applicants :exec
INSERT INTO jobposting_applicants(posting_id, user_id) VALUES($1, $2)
`

type CreateJobPosting_applicantsParams struct {
	PostingID int32
	UserID    int32
}

func (q *Queries) CreateJobPosting_applicants(ctx context.Context, arg CreateJobPosting_applicantsParams) error {
	_, err := q.db.ExecContext(ctx, createJobPosting_applicants, arg.PostingID, arg.UserID)
	return err
}

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (email, username, password_hash, role_id)
VALUES ($1, $2, $3, $4) RETURNING user_id, email, username, password_hash, role_id, created_at
`

type CreateNewUserParams struct {
	Email        string
	Username     string
	PasswordHash sql.NullString
	RoleID       sql.NullInt32
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const createRecruiterProfile = `-- name: CreateRecruiterProfile :exec
INSERT INTO recruiter_profile(user_id) VALUES ($1)
`

func (q *Queries) CreateRecruiterProfile(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, createRecruiterProfile, userID)
	return err
}

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills(name) VALUES($1) RETURNING skill_id, name
`

func (q *Queries) CreateSkill(ctx context.Context, name sql.NullString) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill, name)
	var i Skill
	err := row.Scan(&i.SkillID, &i.Name)
	return i, err
}

const createSkill_Req = `-- name: CreateSkill_Req :exec
INSERT INTO skills_req(skill_id, posting_id) VALUES($1,$2)
`

type CreateSkill_ReqParams struct {
	SkillID   int32
	PostingID int32
}

func (q *Queries) CreateSkill_Req(ctx context.Context, arg CreateSkill_ReqParams) error {
	_, err := q.db.ExecContext(ctx, createSkill_Req, arg.SkillID, arg.PostingID)
	return err
}

const deleteApplicantSkill = `-- name: DeleteApplicantSkill :exec
DELETE FROM applicant_skills WHERE user_id = $1 AND skill_id = $2
`

type DeleteApplicantSkillParams struct {
	UserID  int32
	SkillID int32
}

func (q *Queries) DeleteApplicantSkill(ctx context.Context, arg DeleteApplicantSkillParams) error {
	_, err := q.db.ExecContext(ctx, deleteApplicantSkill, arg.UserID, arg.SkillID)
	return err
}

const deleteJobPosting = `-- name: DeleteJobPosting :exec
DELETE FROM job_posting
WHERE job_title IS NULL AND job_description IS NULL
`

func (q *Queries) DeleteJobPosting(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteJobPosting)
	return err
}

const deleteRequiredSkill = `-- name: DeleteRequiredSkill :exec
DELETE FROM skills_req WHERE posting_id = $1 AND skill_id = $2
`

type DeleteRequiredSkillParams struct {
	PostingID int32
	SkillID   int32
}

func (q *Queries) DeleteRequiredSkill(ctx context.Context, arg DeleteRequiredSkillParams) error {
	_, err := q.db.ExecContext(ctx, deleteRequiredSkill, arg.PostingID, arg.SkillID)
	return err
}

const getApplicantProfile = `-- name: GetApplicantProfile :one
SELECT user_id, first_name, last_name, resume_filename, school, college, age FROM applicant_profile WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetApplicantProfile(ctx context.Context, userID int32) (ApplicantProfile, error) {
	row := q.db.QueryRowContext(ctx, getApplicantProfile, userID)
	var i ApplicantProfile
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.ResumeFilename,
		&i.School,
		&i.College,
		&i.Age,
	)
	return i, err
}

const getApplicantResume = `-- name: GetApplicantResume :one
SELECT resume_fileName FROM applicant_profile WHERE user_id = $1
`

func (q *Queries) GetApplicantResume(ctx context.Context, userID int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getApplicantResume, userID)
	var resume_filename sql.NullString
	err := row.Scan(&resume_filename)
	return resume_filename, err
}

const getApplicantSkill = `-- name: GetApplicantSkill :one
SELECT skill_id, user_id FROM applicant_skills WHERE skill_id = $1
`

func (q *Queries) GetApplicantSkill(ctx context.Context, skillID int32) (ApplicantSkill, error) {
	row := q.db.QueryRowContext(ctx, getApplicantSkill, skillID)
	var i ApplicantSkill
	err := row.Scan(&i.SkillID, &i.UserID)
	return i, err
}

const getApplicantSkills = `-- name: GetApplicantSkills :many
SELECT applicant_skills.skill_id, applicant_skills.user_id, skills.name
FROM applicant_skills
JOIN skills
ON applicant_skills.skill_id = skills.skill_id
WHERE applicant_skills.user_id = $1
`

type GetApplicantSkillsRow struct {
	SkillID int32
	UserID  int32
	Name    sql.NullString
}

func (q *Queries) GetApplicantSkills(ctx context.Context, userID int32) ([]GetApplicantSkillsRow, error) {
	rows, err := q.db.QueryContext(ctx, getApplicantSkills, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApplicantSkillsRow
	for rows.Next() {
		var i GetApplicantSkillsRow
		if err := rows.Scan(&i.SkillID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobPosting = `-- name: GetJobPosting :one
SELECT posting_id, user_id, job_title, job_description, posting_date FROM job_posting WHERE posting_id = $1
`

func (q *Queries) GetJobPosting(ctx context.Context, postingID int32) (JobPosting, error) {
	row := q.db.QueryRowContext(ctx, getJobPosting, postingID)
	var i JobPosting
	err := row.Scan(
		&i.PostingID,
		&i.UserID,
		&i.JobTitle,
		&i.JobDescription,
		&i.PostingDate,
	)
	return i, err
}

const getJobPosting_applicants = `-- name: GetJobPosting_applicants :many
SELECT DISTINCT job_posting.job_title, job_posting.posting_id, recruiter_profile.company_name
FROM job_posting
JOIN jobposting_applicants
ON jobposting_applicants.posting_id = job_posting.posting_id
JOIN recruiter_profile
ON recruiter_profile.user_id = job_posting.user_id
WHERE jobposting_applicants.user_id = $1
`

type GetJobPosting_applicantsRow struct {
	JobTitle    sql.NullString
	PostingID   int32
	CompanyName sql.NullString
}

func (q *Queries) GetJobPosting_applicants(ctx context.Context, userID int32) ([]GetJobPosting_applicantsRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobPosting_applicants, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobPosting_applicantsRow
	for rows.Next() {
		var i GetJobPosting_applicantsRow
		if err := rows.Scan(&i.JobTitle, &i.PostingID, &i.CompanyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobPostings = `-- name: GetJobPostings :many
SELECT DISTINCT job_posting.job_title, job_posting.user_id, job_posting.posting_date,job_posting.posting_id, recruiter_profile.company_name
FROM job_posting
JOIN skills_req
ON job_posting.posting_id = skills_req.posting_id
JOIN applicant_skills
ON skills_req.skill_id = applicant_skills.skill_id
JOIN recruiter_profile
ON job_posting.user_id = recruiter_profile.user_id
WHERE job_posting.job_title IS NOT NULL AND job_posting.job_description IS NOT NULL
`

type GetJobPostingsRow struct {
	JobTitle    sql.NullString
	UserID      sql.NullInt32
	PostingDate sql.NullTime
	PostingID   int32
	CompanyName sql.NullString
}

func (q *Queries) GetJobPostings(ctx context.Context) ([]GetJobPostingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobPostings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobPostingsRow
	for rows.Next() {
		var i GetJobPostingsRow
		if err := rows.Scan(
			&i.JobTitle,
			&i.UserID,
			&i.PostingDate,
			&i.PostingID,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecruiterProfile = `-- name: GetRecruiterProfile :one
SELECT user_id, company_name, company_description FROM recruiter_profile WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetRecruiterProfile(ctx context.Context, userID int32) (RecruiterProfile, error) {
	row := q.db.QueryRowContext(ctx, getRecruiterProfile, userID)
	var i RecruiterProfile
	err := row.Scan(&i.UserID, &i.CompanyName, &i.CompanyDescription)
	return i, err
}

const getRequiredSkills = `-- name: GetRequiredSkills :many
SELECT skills_req.skill_id, skills_req.posting_id, skills.name
FROM skills_req
JOIN skills
ON skills_req.skill_id = skills.skill_id
WHERE skills_req.posting_id = $1
`

type GetRequiredSkillsRow struct {
	SkillID   int32
	PostingID int32
	Name      sql.NullString
}

func (q *Queries) GetRequiredSkills(ctx context.Context, postingID int32) ([]GetRequiredSkillsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRequiredSkills, postingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRequiredSkillsRow
	for rows.Next() {
		var i GetRequiredSkillsRow
		if err := rows.Scan(&i.SkillID, &i.PostingID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkill = `-- name: GetSkill :one
SELECT skill_id, name FROM skills WHERE name = $1
`

func (q *Queries) GetSkill(ctx context.Context, name sql.NullString) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, name)
	var i Skill
	err := row.Scan(&i.SkillID, &i.Name)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, username, password_hash, role_id, created_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, email, username, password_hash, role_id, created_at FROM users WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const newApplicantSkill = `-- name: NewApplicantSkill :exec
INSERT INTO applicant_skills(user_id, skill_id) VALUES($1, $2)
`

type NewApplicantSkillParams struct {
	UserID  int32
	SkillID int32
}

func (q *Queries) NewApplicantSkill(ctx context.Context, arg NewApplicantSkillParams) error {
	_, err := q.db.ExecContext(ctx, newApplicantSkill, arg.UserID, arg.SkillID)
	return err
}

const searchSkillsFunc = `-- name: SearchSkillsFunc :many
SELECT name, similarity(name, $1) 
AS score
FROM skills
WHERE name % $1
ORDER BY score DESC
`

type SearchSkillsFuncRow struct {
	Name  sql.NullString
	Score interface{}
}

func (q *Queries) SearchSkillsFunc(ctx context.Context, similarity interface{}) ([]SearchSkillsFuncRow, error) {
	rows, err := q.db.QueryContext(ctx, searchSkillsFunc, similarity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchSkillsFuncRow
	for rows.Next() {
		var i SearchSkillsFuncRow
		if err := rows.Scan(&i.Name, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicantProfile = `-- name: UpdateApplicantProfile :exec
UPDATE applicant_profile SET first_name = $1, last_name = $2, school = $3, college = $4, age = $5 WHERE user_id = $6
`

type UpdateApplicantProfileParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	School    sql.NullString
	College   sql.NullString
	Age       sql.NullInt32
	UserID    int32
}

func (q *Queries) UpdateApplicantProfile(ctx context.Context, arg UpdateApplicantProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicantProfile,
		arg.FirstName,
		arg.LastName,
		arg.School,
		arg.College,
		arg.Age,
		arg.UserID,
	)
	return err
}

const updateJobPosting = `-- name: UpdateJobPosting :one
UPDATE job_posting SET job_title = $1, job_description = $2 WHERE posting_id = $3 RETURNING posting_id, user_id, job_title, job_description, posting_date
`

type UpdateJobPostingParams struct {
	JobTitle       sql.NullString
	JobDescription sql.NullString
	PostingID      int32
}

func (q *Queries) UpdateJobPosting(ctx context.Context, arg UpdateJobPostingParams) (JobPosting, error) {
	row := q.db.QueryRowContext(ctx, updateJobPosting, arg.JobTitle, arg.JobDescription, arg.PostingID)
	var i JobPosting
	err := row.Scan(
		&i.PostingID,
		&i.UserID,
		&i.JobTitle,
		&i.JobDescription,
		&i.PostingDate,
	)
	return i, err
}

const updateRecruiterProfile = `-- name: UpdateRecruiterProfile :exec
UPDATE recruiter_profile SET company_name = $1, company_description = $2 WHERE user_id = $3
`

type UpdateRecruiterProfileParams struct {
	CompanyName        sql.NullString
	CompanyDescription sql.NullString
	UserID             int32
}

func (q *Queries) UpdateRecruiterProfile(ctx context.Context, arg UpdateRecruiterProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateRecruiterProfile, arg.CompanyName, arg.CompanyDescription, arg.UserID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = $1, username = $2 WHERE user_id = $3
`

type UpdateUserParams struct {
	Email    string
	Username string
	UserID   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Email, arg.Username, arg.UserID)
	return err
}
